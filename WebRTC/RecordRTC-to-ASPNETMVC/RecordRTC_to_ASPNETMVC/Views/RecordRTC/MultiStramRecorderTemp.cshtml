<!DOCTYPE html>
<html lang="en">
    <head>
        <title>MultiStreamRecorder.js & MediaStreamRecorder</title>

        
        @*<script src="https://cdn.webrtc-experiment.com/MediaStreamRecorder.js"></script>*@

        <script src="../../Scripts/jquery.min.js"></script>
        <script src="../../Scripts/MediaStreamRecorder.js"></script>
        <style>
            input {
                border: 1px solid rgb(46, 189, 235);
                border-radius: 3px;
                font-size: 1em;
                outline: none;
                padding: .2em .4em;
                width: 60px;
                text-align: center;
            }
        </style>
    </head>
    <body>
        <div>
            <label for="time-interval">Time Interval (milliseconds):</label>
            <input type="text" id="time-interval" value="5000">ms

            <button id="start-recording">Start Recording</button>
            <button id="stop-recording" disabled>Stop Recording</button>
        </div>
        
        <div id="container"></div>
        
        <script>
            // commonly allowed resolutions:
            // ['1920:1080', 
            // '1280:720', 
            // '960:720', 
            // '640:360', 
            // '640:480', 
            // '320:240', 
            // '320:180']
            var resolution_x = 1280;
            var resolution_y = 720;

            var mediaConstraints = {
                audio: true,
                video: {
                    mandatory: {
                        maxWidth: resolution_x,
                        maxHeight: resolution_y,
                        //minFrameRate: 3,
                        //maxFrameRate: 64,
                        //minAspectRatio: 1.77
                    }
                }
            };

            
            //start click
            document.querySelector('#start-recording').onclick = function() {
                this.disabled = true;
                navigator.getUserMedia(mediaConstraints, onMediaSuccess, onMediaError);
            };

            //Stop click
            document.querySelector('#stop-recording').onclick = function() {
                this.disabled = true;
                document.querySelector('#start-recording').disabled = false;

                this.disabled = true;
                multiStreamRecorder.stop();

                if (multiStreamRecorder.stream) {
                    multiStreamRecorder.stream.stop();
                }

                //if (audioRecorder.stream)
                //    audioRecorder.stream.stop();
                //if (videoRecorder.stream)
                //    videoRecorder.stream.stop();


                //audioRecorder.stop();
                //videoRecorder.stop();

                recordingStopped = true;
                __log("Recording stopped " + recordingStopped);


                // mergeChunkFiles(mainFileName);
                //Wait until all files uploaded and converted 
                var checkFileUploadStatues = setInterval(function () {
                    debugger;
                    __log("Checking for remaining conversion of file");
                    __log("Uploadcounter ->" + uploadedFileCounter);
                    __log("ConvertedFileCounter ->" + convertedFileCounter);
                    
                    if (convertedFileCounter == parseInt(uploadedFileCounter / 2)) {
                        clearInterval(checkFileUploadStatues);

                        __log("trying to merge file ");
                        mergeChunkFiles(mainFileName);
                    }
                }, 2000);

                //if(multiStreamRecorder.stream) {
                //    multiStreamRecorder.stream.stop();
                //}
            };

            var multiStreamRecorder;

            //var audioVideoBlobs = {};
            //var recordingInterval = 0;

            var fileToUpload = 0;
            var convertedFileCounter = 0;
            var audioFileCounter = 0;
            var videoFileCounter = 0;
            var uploadedFileCounter = 0;
            var audioUploadCounter = 0;
            var videoUploadCounter = 0;

            var audioRecorder;
            var videoRecorder;
            var fileNameStored;
            var recordingStopped = false;
            var mainFileName;



            /// On start success 
            function onMediaSuccess(stream) {
                var video = document.createElement('video');

                video = mergeProps(video, {
                    controls: true,
                    src: URL.createObjectURL(stream)
                });
            
                 mainFileName = new Date().getTime();

                video.addEventListener('loadedmetadata', function() {
                    //audioRecorder = new MediaStreamRecorder(stream);
                    //videoRecorder = new MediaStreamRecorder(stream);
                    //audioRecorder.mimeType = 'audio/wav';
                    //videoRecorder.mimeType = 'video/webm';

                    var audioBlobs = [];
                    var videoBlobs = [];

                    //videoRecorder.video = video;

                    __log("Recorder Initialized");



                    multiStreamRecorder = new MultiStreamRecorder(stream);

                    // below line is optional
                    // because we already set "video.width"
                    // and "video.height"....5 lines above
                    multiStreamRecorder.canvas = {
                        width: video.width,
                        height: video.height
                    };

                    multiStreamRecorder.video = video;

                    multiStreamRecorder.ondataavailable = function (blobs) {
                        //appendLink(blobs.audio);
                        //appendLink(blobs.video);
                        postAudio(blobs.audio);
                        postVideo(blobs.video);
                    };

                    //audioRecorder.ondataavailable = function(blob) {
                    var postAudio = function (blob) {
                        
                        __log("Audio available to upload");
                        var audioFileName = mainFileName + "-" + audioFileCounter + ".wav";
                        fileNameStored = mainFileName + "-" + audioFileCounter;
                        ++audioFileCounter;
                        __log("Auido counter ->" + audioFileCounter);

                        //PostBlob(blob, "audio", audioFileName, mainFileName, audioUploadCallback);

                        ++fileToUpload;
                        PostBlob(blob, "audio", audioFileName, mainFileName, function(data) {
                            ++uploadedFileCounter;
                            
                            __log("Adudio uploaded : Uploaded file counter -> " + uploadedFileCounter);

                            console.log("Check for conversion");
                            --fileToUpload;

                            ++audioUploadCounter;

                            //if (fileToUpload <= 0 && (convertedFileCounter <= parseInt(uploadedFileCounter/2) )) {
                            if (audioUploadCounter == videoUploadCounter) {
                                //console.log("Converting File ->" + fileName);
                                var fileNameToconvert = mainFileName + "-" + (audioUploadCounter - 1);
                                ConvertToMp4(fileNameToconvert, mainFileName);
                            }
                        });

                    };

                    //Video Available
                    // videoRecorder.ondataavailable = function(blob) {
                    var postVideo= function (blob) {
                        
                        var videoFileName = mainFileName + "-" + videoFileCounter + ".webm";
                        __log("Video available to upload");
                        ++videoFileCounter;

                        __log("Video counter ->" + videoFileCounter);
                        //PostBlob(blob, "video", videoFileName, mainFileName,videoUploadCallback);

                        ++fileToUpload;
                        PostBlob(blob, "video", videoFileName, mainFileName, function(data) {
                            var temp = mainFileName + "-" + convertedFileCounter;
                            
                            ++uploadedFileCounter;

                            __log("Video uploaded : Uploaded file counter -> " + uploadedFileCounter);
                            __log("Check for conversion");

                            --fileToUpload;
                            ++videoUploadCounter;
                            //if (fileToUpload <= 0 && (convertedFileCounter <= parseInt(uploadedFileCounter / 2))) {

                            if (audioUploadCounter == videoUploadCounter) {
                                var fileNameToconvert = mainFileName + "-" + (audioUploadCounter - 1);
                                ConvertToMp4(fileNameToconvert, mainFileName);
                            }
                                
                        });
                    };

                    var timeInterval = document.querySelector('#time-interval').value;
                    if (timeInterval)
                            timeInterval = parseInt(timeInterval);
                    else timeInterval = 30 * 1000;

                    multiStreamRecorder.start(timeInterval);

                });

                video.play();
                document.querySelector('#stop-recording').disabled = false;
                container.appendChild(video);
                container.appendChild(document.createElement('hr'));
            }
            // On start success 

            //var audioUploadCallback = function audioUploaded(mainFileName) {
            //    --fileToUpload;
            //    if (fileToUpload <= 0 && (convertedFileCounter <= audioFileCounter)) {
            //        //console.log("Converting File ->" + fileName);
            //        ConvertToMp4(mainFileName + "-" + convertedFileCounter);
            //    }

            //};

            //var videoUploadCallback = function(mainFileName) {
            //    --fileToUpload;
            //    if (fileToUpload <= 0 && (convertedFileCounter <= videoFileCounter)) {
            //        //console.log("Converting File ->" + fileName);
            //        ConvertToMp4(mainFileName + "-" + convertedFileCounter);
            //    }
            //};


            function ConvertToMp4(fileName, mainFileName) {
                // FormData
                debugger;
                var formData = new FormData();
                formData.append("audio" + '-filename', fileName + ".wav");
                formData.append("video" + '-filename', fileName + ".webm");
                formData.append("mainFileName", mainFileName);
                formData.append("convertCounter", convertedFileCounter);
                formData.append("fileType", "Video");

                var fileType = "video";

                // Check for status of server 

                //checkStatus("/RecordRTC/CheckStatus", fileName+".txt");
                __log("Conversion started for ->" + fileName);

                $.ajax({
                        type: 'POST',
                        url: '/RecordRTC/ConvertFile',
                        data: formData,
                        processData: false,
                        contentType: false
                    }).done(function(data) {
                        
                        ++convertedFileCounter;
                        __log("File converted ->" + fileName);
                        __log("-------------Convetred File counter -> " + convertedFileCounter);
                        
                    })
                    .error(function () {

                    });
            }

            /// Call when recording stopped to mergre all files and create final file 
            function mergeChunkFiles(mainFileName) {
                var option = {
                    url: "/RecordRTC/MergeChunkFiles",
                    type: "POST",
                    data : {mainFileName : mainFileName, fileType : "Video"}
                };

                $.ajax(option).done(function (data) {
                    __log("File merged ->" + data);
                    var video = document.createElement("video");
                    video.width = resolution_x;
                    video.height = resolution_y;
                    video.src = "/uploads/" + data;
                    video.controls = true;
                    container.appendChild(video);
                    video.play();
                    container.appendChild(document.createElement('hr'));
                });
            }

            function appendLink(blob) {
                var a = document.createElement('a');
                a.target = '_blank';
                a.innerHTML = 'Open Recorded ' + (blob.type == 'audio/ogg' ? 'Audio' : 'Video') + ' No. ' + (index++) + ' (Size: ' + bytesToSize(blob.size) + ') Time Length: ' + getTimeLength(timeInterval);

                a.href = URL.createObjectURL(blob);

                container.appendChild(a);
                container.appendChild(document.createElement('hr'));
            }

            function onMediaError(e) {
                console.error('media error', e);
            }

            var container = document.getElementById('container');
            var index = 1;
            
            function bytesToSize(bytes) {
               var k = 1000;
               var sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];
               if (bytes === 0) return '0 Bytes';
               var i = parseInt(Math.floor(Math.log(bytes) / Math.log(k)),10);
               return (bytes / Math.pow(k, i)).toPrecision(3) + ' ' + sizes[i];
            }
            
            function getTimeLength(milliseconds) {
                var data = new Date(milliseconds);
                return data.getUTCHours()+" hours, "+data.getUTCMinutes()+" minutes and "+data.getUTCSeconds()+" second(s)";
            }
            
            window.onbeforeunload = function() {
                document.querySelector('#start-recording').disabled = false;
            };




            function PostBlob(blob, fileType, fileName, mainFileName, callback) {
                // FormData
                console.log("Size " + blob.size);

                var formData = new FormData();
                formData.append(fileType + '-filename', fileName);
                formData.append(fileType + '-blob', blob);
                formData.append("chunkFileName", fileName);
                formData.append("mainFileName", mainFileName);
                formData.append("fileType", "Video");
                //++activeAjaxConnections;
                var option = {
                    type: 'POST',
                    url: '/RecordRTC/PostRecordedAudioVideo',
                    data: formData,
                    processData: false,
                    contentType: false
                };
                $.ajax(option).done(callback)
                .error(function () {

                });


            }

            function __log(msg) {
                console.log(msg);
            }
        </script>
    </body>
</html>
